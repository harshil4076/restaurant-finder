{"version":3,"sources":["components/searchBar/searchBar.js","components/resultCard/resultCard.js","App.js","store/action/index.js","services/api.js","store/actionTypes.js","serviceWorker.js","store/reducer/index.js","store/index.js","index.js"],"names":["SearchBar","props","searchResults","useState","item","setItem","className","onChange","e","target","name","value","handleChange","onSubmit","preventDefault","stopPropagation","then","catch","err","handleSubmit","required","aria-label","type","placeholder","ResultCard","restObj","src","image_url","alt","address","city","phone","price","href","reserve_url","rel","mapDispatchToProps","userData","dispatch","Promise","resolve","reject","method","data","axios","params","res","console","log","apiCall","payload","getSearchResult","addError","connect","state","restaurantList","matchResults","error","removeError","message","config","postal_code","list","restaurants","map","restaurant","key","id","Boolean","window","location","hostname","match","DEFAULT_STATE","rootReducer","combineReducers","action","middlewares","thunk","store","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a21c7c8c.chunk.js","sourcesContent":["import React , { useState} from 'react';\r\nimport './searchBar.css'\r\n\r\n\r\nfunction SearchBar (props) {\r\n  const { searchResults } = props\r\n    const [item, setItem] =useState();\r\n    //to handle user input\r\n      const handleChange = (e) => {\r\n        setItem({\r\n          [e.target.name] : e.target.value\r\n        })\r\n      }\r\n      //handle api call\r\n      const handleSubmit = (e) => {\r\n          e.preventDefault()\r\n          e.stopPropagation()\r\n          const type = \"restaurants\";\r\n          searchResults(type, item).then(() => {\r\n            return\r\n          }).catch((err) => {\r\n            return\r\n          })\r\n      }\r\n    return (\r\n        <div className=\"searchBar\">\r\n              <form onChange={(e) => handleChange(e)} onSubmit={(e) => handleSubmit(e)}>\r\n                  <input required aria-label=\"Enter City\" type=\"text\" className=\"Input\" name=\"city\" placeholder=\"Enter City\" />\r\n                  <input aria-label=\"Enter Address\" type=\"text\" className=\"Input\" name=\"address\" placeholder=\"Enter Address\" />\r\n                  <input aria-label=\"Enter Postal code\" type=\"text\" className=\"Input\" name=\"postal_code\" placeholder=\"Enter Postal code\" />\r\n                  <input aria-label=\"Restaurant Name\" type=\"text\" className=\"Input\" name=\"name\" placeholder=\"Restaurant Name\" />\r\n                  <button className=\"SearchButton\">Search</button>\r\n              </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './resultCard.css';\r\n\r\nfunction ResultCard (props){\r\n    const {restObj} = props;\r\n    return (\r\n        <div className=\"ResultCard\">\r\n            <img className=\"RestaurantImage\" src={restObj.image_url} alt={restObj.name} />\r\n            <div className=\"RestaurantDetail\">\r\n                <p className=\"RestName\">{restObj.name}</p>\r\n                <p className=\"RestAddress\">{restObj.address}</p>\r\n                <p className=\"RestCity\">{restObj.city}</p>\r\n\r\n            </div>\r\n            <div className=\"RestaurantPhone\">\r\n                <p className=\"RestPh\">Phone no - {restObj.phone}</p>\r\n                <p className=\"RestPrice\">Price - {restObj.price}</p>\r\n            </div>\r\n            <div className=\"ReserveDiv\">\r\n                <a className=\"ReserveLink\" href={restObj.reserve_url} rel=\"noopener noreferrer\" target=\"_blank\">Reserve</a>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultCard;","import React from 'react';\nimport { connect } from 'react-redux'\nimport './App.css';\nimport SearchBar from './components/searchBar/searchBar'\nimport ResultCard from './components/resultCard/resultCard'\nimport { searchResults } from './store/action/index'\n\nfunction App(props) {\n  const { searchResults , restaurantList, addError, removeError } = props;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1>Search Restaurant</h1>\n      </header>\n        <div className=\"InputSelection\">\n            <SearchBar searchResults={searchResults} />\n            {addError?<div> <p>Please Enter valid Data.</p>\n                             {addError.message}\n            <p>The data you entered is City- {addError.config.params.city}</p>\n                                      <p>Address- {addError.config.params.address} </p>\n                                      <p>Postal code -{addError.config.params.postal_code} </p>\n                                      <p>Name -{addError.config.params.name} </p>\n\n                            </div>: removeError}\n        </div>\n        <div className=\"SearchResult\">\n          { \n          restaurantList.list.restaurants? \n            restaurantList.list.restaurants.map(restaurant => (\n              <ResultCard restObj={restaurant} key={restaurant.id} />\n            ))\n            :\n            <div>\n            <ResultCard restObj={restaurantList.list} key={restaurantList.list.id} />\n            </div>\n\n          }\n        </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    restaurantList: state.matchResults,\n    addError : state.matchResults.error,\n    removeError : state.removeError\n  }\n}\nconst mapDispatchToProps = { searchResults };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { apiCall } from '../../services/api'\r\nimport { SEARCH_RESULT, ADD_ERROR, REMOVE_ERROR } from '../actionTypes'\r\n\r\n\r\n//action to get restaurant List\r\nfunction getSearchResult(data){\r\n    return {\r\n        type: SEARCH_RESULT,\r\n        payload : data\r\n    }\r\n}\r\n//action to add error\r\nfunction addError (err){\r\n    return {\r\n        type: ADD_ERROR,\r\n        payload: err\r\n    }\r\n}\r\n//action to remove error\r\n\r\nfunction removeError (){\r\n    return {\r\n        type: REMOVE_ERROR,\r\n    }\r\n}\r\nexport function searchResults(type, userData){\r\n    return function(dispatch) {\r\n        return new Promise((resolve, reject) => {\r\n            return apiCall(\"get\", `/${type}`, userData)\r\n                .then((data) => {\r\n                    dispatch(getSearchResult(data))\r\n                    dispatch(removeError())\r\n                    resolve();\r\n                })\r\n                .catch(err => {\r\n                    dispatch(addError(err))\r\n                    reject();\r\n                })\r\n        })\r\n            }\r\n                    \r\n    }\r\n","import axios from 'axios';\r\n\r\n\r\nexport function apiCall(method,type,  data){\r\n    return new Promise((resolve, reject) => {\r\n        return axios[method](`http://opentable.herokuapp.com/api${type}`, {\r\n            params: {\r\n                ...data\r\n            }\r\n        })\r\n        .then(res => {\r\n            console.log(res)\r\n            return resolve(res.data);\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            return reject(err)\r\n        });\r\n    })\r\n}","export const SEARCH_RESULT = \"SEARCH_RESULT\";\r\nexport const ADD_ERROR = \"ADD_ERROR\";\r\nexport const REMOVE_ERROR =  \"REMOVE_ERROR\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SEARCH_RESULT, ADD_ERROR, REMOVE_ERROR } from '../actionTypes'\r\nimport { combineReducers } from 'redux'\r\n\r\nexport const DEFAULT_STATE = {\r\n    list: {\r\n        \"id\": 21307,\r\n        \"name\": \"Scaramouche Restaurant\",\r\n        \"address\": \"1 Benvenuto Place\",\r\n        \"city\": \"Toronto\",\r\n        \"state\": \"ON\",\r\n        \"area\": \"Toronto / SW Ontario\",\r\n        \"postal_code\": \"M4V 2L1\",\r\n        \"country\": \"CA\",\r\n        \"phone\": \"4169618011\",\r\n        \"lat\": 43.68207,\r\n        \"lng\": -79.40041,\r\n        \"price\": 4,\r\n        \"reserve_url\": \"http://www.opentable.com/single.aspx?rid=21307\",\r\n        \"mobile_reserve_url\": \"http://mobile.opentable.com/opentable/?restId=21307\",\r\n        \"image_url\": \"https://www.opentable.com/img/restimages/21307.jpg\"\r\n      }\r\n}\r\n\r\nexport const matchResults = (state = DEFAULT_STATE, action) => {\r\n    switch(action.type){\r\n        case SEARCH_RESULT: \r\n            return {\r\n                // ...state, \r\n               list: action.payload\r\n            };\r\n            case ADD_ERROR: \r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n            case REMOVE_ERROR: \r\n            return {\r\n                ...state\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\nexport const rootReducer = combineReducers(\r\n                                                {matchResults}\r\n                                            )\r\n ","import { createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducer/index'\r\n\r\nconst middlewares = [thunk]\r\n\r\n export const store = createStore(\r\n                    rootReducer,\r\n                    compose(\r\n                        applyMiddleware(...middlewares),\r\n                        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n                        ) \r\n                    );\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//Redux setup\nimport { Provider } from 'react-redux';\nimport { store} from './store/index'\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n         <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}